# -*- coding: utf-8 -*-
"""
–ú–ê–°–¢–ï–†-–°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ó–í–û–ù–ö–û–í: –ü–û–õ–ù–´–ô –¶–ò–ö–õ
MP3 ‚Üí AssemblyAI ‚Üí –î–∏–∞–ª–æ–≥ ‚Üí Gemini AI ‚Üí –û—Ç—á–µ—Ç—ã

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
1. –û–±—Ä–∞–±–æ—Ç–∫—É MP3 —á–µ—Ä–µ–∑ AssemblyAI (–∏–∑ voices.py)
2. –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini AI
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤

–ê–≤—Ç–æ—Ä: Expert AI System
"""

import json
import os
import time
import pathlib
import requests
from typing import Dict, List, Any, Optional
from datetime import datetime
from collections import defaultdict
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Google GenAI (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
try:
    from google import genai
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: Google GenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-genai")
    print("üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Gemini AI")
    exit(1)


class AssemblyAIProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ MP3 —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ AssemblyAI"""
    
    def __init__(self, api_key: str = "83d2ca78325f4cb59b2fc841e9c89137"):
        self.api_key = api_key
        self.headers = {"authorization": api_key}
    
    def upload_audio(self, path: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ AssemblyAI"""
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º MP3 —Ñ–∞–π–ª: {path}")
        
        if not os.path.exists(path):
            raise FileNotFoundError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            
        with open(path, "rb") as f:
            res = requests.post("https://api.assemblyai.com/v2/upload",
                              headers=self.headers, data=f)
        res.raise_for_status()
        url = res.json()["upload_url"]
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ AssemblyAI")
        return url

    def start_transcription(self, url: str, expected_speakers: int = 2) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
        print(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å {expected_speakers} —Å–ø–∏–∫–µ—Ä–∞–º–∏...")
        
        job = {
            "audio_url": url,
            "speaker_labels": True,
            "speakers_expected": expected_speakers,
            "language_code": "ru",
            "punctuate": True,
            "format_text": True
        }
        
        res = requests.post("https://api.assemblyai.com/v2/transcript",
                          headers=self.headers, json=job)
        res.raise_for_status()
        job_id = res.json()["id"]
        print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, ID: {job_id}")
        return job_id

    def wait_transcription(self, job_id: str) -> dict:
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
        status_url = f"https://api.assemblyai.com/v2/transcript/{job_id}"
        
        while True:
            res = requests.get(status_url, headers=self.headers).json()
            status = res["status"]
            
            if status == "completed":
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return res
            elif status == "error":
                error_msg = res.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}")
                raise Exception(f"–û—à–∏–±–∫–∞ AssemblyAI: {error_msg}")
            else:
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status}...")
                time.sleep(5)

    def analyze_speaker_patterns(self, utterances: list) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        patterns = {}
        
        for utt in utterances:
            speaker = utt['speaker']
            text = utt['text'].lower()
            
            if speaker not in patterns:
                patterns[speaker] = {
                    'questions': 0,
                    'long_speeches': 0,
                    'short_responses': 0,
                    'total_words': 0,
                    'selling_words': 0
                }
            
            words = text.split()
            word_count = len(words)
            patterns[speaker]['total_words'] += word_count
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            if '?' in text:
                patterns[speaker]['questions'] += 1
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Ä–µ–ø–ª–∏–∫
            if word_count > 20:
                patterns[speaker]['long_speeches'] += 1
            elif word_count <= 5:
                patterns[speaker]['short_responses'] += 1
            
            # –°–ª–æ–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            selling_words = ['–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '—É—á–∞—Å—Ç–∏–µ', '—Å—É–º–º–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–ø—Ä–æ–¥–∞–∂–∞']
            patterns[speaker]['selling_words'] += sum(1 for word in selling_words if word in text)
        
        return patterns

    def smart_merge_speakers(self, utterances: list, max_speakers: int = 2) -> list:
        """–£–º–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤"""
        if not utterances:
            return utterances
        
        speaker_stats = defaultdict(list)
        for utt in utterances:
            speaker_stats[utt['speaker']].append(utt)
        
        # –ï—Å–ª–∏ —Å–ø–∏–∫–µ—Ä–æ–≤ –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(speaker_stats) <= max_speakers:
            return utterances
        
        print(f"üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(speaker_stats)} —Å–ø–∏–∫–µ—Ä–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–æ {max_speakers}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–∏
        patterns = self.analyze_speaker_patterns(utterances)
        
        speaker_roles = {}
        for speaker, stats in patterns.items():
            # –ò–Ω–¥–µ–∫—Å "–ø—Ä–æ–¥–∞–≤—Ü–∞"
            seller_score = (
                stats['long_speeches'] * 2 +
                stats['selling_words'] * 3 +
                stats['questions'] * 1
            )
            speaker_roles[speaker] = {
                'seller_score': seller_score,
                'total_words': stats['total_words']
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–¥–∞–≤—á–µ—Å–∫–æ–º—É –∏–Ω–¥–µ–∫—Å—É
        sorted_speakers = sorted(speaker_roles.items(), 
                               key=lambda x: (x[1]['seller_score'], x[1]['total_words']), 
                               reverse=True)
        
        print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–æ–ª–µ–π:")
        for speaker, role in sorted_speakers:
            print(f"   {speaker}: –ø—Ä–æ–¥–∞–≤–µ—Ü_–∏–Ω–¥–µ–∫—Å={role['seller_score']}, —Å–ª–æ–≤={role['total_words']}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        speaker_mapping = {}
        if len(sorted_speakers) >= 2:
            speaker_mapping[sorted_speakers[0][0]] = 'A'  # –ü—Ä–æ–¥–∞–≤–µ—Ü
            speaker_mapping[sorted_speakers[1][0]] = 'B'  # –ö–ª–∏–µ–Ω—Ç
            
            # –û—Å—Ç–∞–ª—å–Ω—ã—Ö –∫ –ø—Ä–æ–¥–∞–≤—Ü—É (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Ñ–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏)
            for i in range(2, len(sorted_speakers)):
                speaker_mapping[sorted_speakers[i][0]] = 'A'
        else:
            speaker_mapping[sorted_speakers[0][0]] = 'A'
        
        print("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ:")
        for orig, new in speaker_mapping.items():
            print(f"   {orig} ‚Üí SPEAKER_{new}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        merged = []
        for utt in utterances:
            new_utt = utt.copy()
            new_utt['speaker'] = speaker_mapping[utt['speaker']]
            merged.append(new_utt)
        
        return merged

    def create_dialogue_file(self, transcription_result: dict, max_speakers: int = 2) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–∏–∞–ª–æ–≥–∞"""
        print("üìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∏–∞–ª–æ–≥–∞...")
        
        utterances = transcription_result.get("utterances", [])
        if not utterances:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        # –£–º–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤
        merged = self.smart_merge_speakers(utterances, max_speakers)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        merged.sort(key=lambda x: x['start'])
        
        lines = []
        for utt in merged:
            spk = f"SPEAKER_{utt['speaker']}"
            start = utt["start"] / 1000.0
            lines.append(f"[{spk} {start:08.2f}] {utt['text']}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∏–∞–ª–æ–≥–∞
        dialogue_file = "dialogue.txt"
        pathlib.Path(dialogue_file).write_text("\n".join(lines), encoding="utf-8")
        
        print(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω: {dialogue_file}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫: {len(lines)}")
        
        return dialogue_file


class GeminiCallAnalyzer:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ –±–∞–∑–µ Gemini AI"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.retry_count = 0
        self.max_retries = 3
        
    def analyze_call(self, dialogue_text: str, retry_delay: int = 60) -> Dict[str, Any]:
        """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Gemini AI"""
        
        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–¥–∞—é—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥:

{dialogue_text}

–ü–†–û–í–ï–î–ò –ê–ù–ê–õ–ò–ó –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:
1. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è (20%)
2. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π (25%)
3. –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è (20%)
4. –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ (20%)
5. –ó–∞–∫—Ä—ã—Ç–∏–µ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ (15%)

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û –û–ü–†–ï–î–ï–õ–ò:
- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
- –£–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏:
- overall_score (0-100)
- quality_rating
- strengths (—Å–ø–∏—Å–æ–∫)
- weaknesses (—Å–ø–∏—Å–æ–∫)
- recommendations (—Å–ø–∏—Å–æ–∫)
- psychological_profile (–æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏: description, keywords, client_type, motivation_level, decision_style)
- critical_moments (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏: time, description)
- success_probability
"""
        

        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = genai.Client(api_key=self.api_key)
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ø—ã—Ç–∫–∏
            models = ['gemini-2.0-flash', 'gemini-1.5-flash', 'gemini-pro']
            model = models[min(self.retry_count, len(models)-1)]
            
            print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model}")
            
            response = client.models.generate_content(
                model=model,
                contents=prompt
            )
            
            if response and response.text:
                return self._parse_response(response.text)
            else:
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                
        except Exception as e:
            error_str = str(e)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–≤–æ—Ç—ã - –ø—Ä–æ–±—É–µ–º retry
            if "429" in error_str or "quota" in error_str.lower():
                print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—ã—Ç–∫–∞ {self.retry_count + 1}/{self.max_retries}")
                
                if self.retry_count < self.max_retries:
                    self.retry_count += 1
                    wait_time = retry_delay * self.retry_count
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                    return self.analyze_call(dialogue_text, retry_delay)
                else:
                    print("‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API")
                    print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã API –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                    raise Exception("Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–µ–≤—ã—à–µ–Ω—ã –∫–≤–æ—Ç—ã")
            
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
            else:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Gemini API: {error_str}")
                print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                raise Exception(f"Gemini API –æ—à–∏–±–∫–∞: {error_str}")
    
    def _parse_response(self, response_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Gemini"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_text = json_match.group()
                # –û—á–∏—â–∞–µ–º –æ—Ç markdown
                json_text = re.sub(r'```json\n?', '', json_text)
                json_text = re.sub(r'```\n?', '', json_text)
                return json.loads(json_text)
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ JSON, –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
                return self._parse_text_response(response_text)
        except:
            return self._parse_text_response(response_text)
    
    def _parse_text_response(self, text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        result = {
            "overall_score": 70,
            "quality_rating": "–•–æ—Ä–æ—à–∏–π",
            "strengths": [],
            "weaknesses": [],
            "recommendations": [],
            "analysis_text": text
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞
        lines = text.split('\n')
        current_section = None
        
        for line in lines:
            line = line.strip()
            if '—Å–∏–ª—å–Ω' in line.lower() or '–ø—Ä–µ–∏–º—É—â' in line.lower():
                current_section = 'strengths'
            elif '—Å–ª–∞–±' in line.lower() or '–Ω–µ–¥–æ—Å—Ç–∞—Ç' in line.lower():
                current_section = 'weaknesses'
            elif '—Ä–µ–∫–æ–º–µ–Ω–¥' in line.lower() or '—Å–æ–≤–µ—Ç' in line.lower():
                current_section = 'recommendations'
            elif line.startswith('-') or line.startswith('‚Ä¢') or line.startswith('*'):
                if current_section and current_section in result:
                    result[current_section].append(line[1:].strip())
        
        return result
    



class MasterCallAnalyzer:
    """–ú–∞—Å—Ç–µ—Ä-—Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: MP3 ‚Üí –î–∏–∞–ª–æ–≥ ‚Üí AI –ê–Ω–∞–ª–∏–∑ ‚Üí –û—Ç—á–µ—Ç—ã"""
    
    def __init__(self, assemblyai_key: str = "83d2ca78325f4cb59b2fc841e9c89137", 
                 gemini_key: str = None):
        if not gemini_key:
            gemini_key = os.getenv("GEMINI_API_KEY", "AIzaSyCZcwunnoBBqhTYtbgJZl-7hpqJEVqFTeY")
        
        self.assembly_processor = AssemblyAIProcessor(assemblyai_key)
        self.gemini_analyzer = GeminiCallAnalyzer(gemini_key)
    
    def process_audio_complete(self, audio_file: str, expected_speakers: int = 2) -> tuple:
        """–ü–û–õ–ù–´–ô –¶–ò–ö–õ: MP3 ‚Üí –î–∏–∞–ª–æ–≥ ‚Üí –ê–Ω–∞–ª–∏–∑ ‚Üí –û—Ç—á–µ—Ç—ã"""
        
        print("="*80)
        print("üéØ –ú–ê–°–¢–ï–†-–°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ó–í–û–ù–ö–û–í")
        print("üìÅ MP3 ‚Üí AssemblyAI ‚Üí Gemini AI ‚Üí –û—Ç—á–µ—Ç—ã")
        print("="*80)
        print(f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {audio_file}")
        print()
        
        try:
            # –®–ê–ì 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ MP3 —á–µ—Ä–µ–∑ AssemblyAI
            print("üîÑ –®–ê–ì 1: –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø")
            print("-" * 40)
            
            upload_url = self.assembly_processor.upload_audio(audio_file)
            job_id = self.assembly_processor.start_transcription(upload_url, expected_speakers)
            transcription_result = self.assembly_processor.wait_transcription(job_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç AssemblyAI
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            assembly_file = f"assembly_result_{timestamp}.json"
            with open(assembly_file, 'w', encoding='utf-8') as f:
                json.dump(transcription_result, f, ensure_ascii=False, indent=2)
            print(f"üíæ –î–∞–Ω–Ω—ã–µ AssemblyAI: {assembly_file}")
            
            # –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            print("\nüîÑ –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –î–ò–ê–õ–û–ì–ê")
            print("-" * 40)
            
            dialogue_file = self.assembly_processor.create_dialogue_file(transcription_result, expected_speakers)
            
            # –®–ê–ì 3: AI –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini
            print("\nüîÑ –®–ê–ì 3: AI –ê–ù–ê–õ–ò–ó")
            print("-" * 40)
            
            analysis_result = self.gemini_analyzer.analyze_call(self._read_dialogue_for_analysis(dialogue_file))
            
            # –®–ê–ì 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
            print("\nüîÑ –®–ê–ì 4: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í")
            print("-" * 40)
            
            json_file, md_file = self._generate_complete_reports(analysis_result, dialogue_file, assembly_file)
            
            # –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
            print("\n" + "="*80)
            print("üéâ –ú–ê–°–¢–ï–†-–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print("="*80)
            print("üìä –ò–¢–û–ì–û–í–´–ï –§–ê–ô–õ–´:")
            print(f"   üéµ –ò—Å—Ö–æ–¥–Ω—ã–π MP3: {audio_file}")
            print(f"   üìù –î–∏–∞–ª–æ–≥: {dialogue_file}")
            print(f"   üìã JSON –∞–Ω–∞–ª–∏–∑: {json_file}")
            print(f"   üìÑ MD –æ—Ç—á–µ—Ç: {md_file}")
            print(f"   üîÑ AssemblyAI –¥–∞–Ω–Ω—ã–µ: {assembly_file}")
            print()
            print(f"üèÜ –û–¶–ï–ù–ö–ê –ó–í–û–ù–ö–ê: {analysis_result.get('overall_score', 'N/A')}/100")
            print(f"üìà –ö–ê–¢–ï–ì–û–†–ò–Ø: {analysis_result.get('quality_rating', 'N/A')}")
            print(f"üéØ –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –£–°–ü–ï–•–ê: {analysis_result.get('success_probability', 'N/A')}")
            print("="*80)
            
            return dialogue_file, json_file, md_file, assembly_file
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ê–°–¢–ï–†-–°–ò–°–¢–ï–ú–´: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ MP3 —Ñ–∞–π–ª–∞")
            print("   - API –∫–ª—é—á–∏ AssemblyAI –∏ Gemini")
            print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            print("   - –ö–≤–æ—Ç—ã API —Å–µ—Ä–≤–∏—Å–æ–≤")
            raise

    def _read_dialogue_for_analysis(self, dialogue_file: str) -> str:
        """–ß–∏—Ç–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Gemini"""
        with open(dialogue_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        dialogue_parts = []
        for line in lines:
            line = line.strip()
            if line.startswith('[SPEAKER_'):
                parts = line.split('] ', 1)
                if len(parts) == 2:
                    header = parts[0][1:]
                    text = parts[1]
                    
                    header_parts = header.split(' ')
                    if len(header_parts) >= 2:
                        speaker = header_parts[0]
                        time_str = header_parts[1]
                        
                        role = "–ü–†–û–î–ê–í–ï–¶" if speaker == "SPEAKER_A" else "–ö–õ–ò–ï–ù–¢"
                        dialogue_parts.append(f"[{time_str}] {role}: {text}")
        
        return "\n".join(dialogue_parts)

    def _generate_complete_reports(self, analysis_result: Dict[str, Any], 
                                 dialogue_file: str, assembly_file: str) -> tuple:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –º–∞—Å—Ç–µ—Ä-—Å–∏—Å—Ç–µ–º—ã"""
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # JSON –æ—Ç—á–µ—Ç
        json_file = f"master_analysis_{timestamp}.json"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-—Å–∏—Å—Ç–µ–º—ã
        complete_analysis = {
            **analysis_result,
            "system_info": {
                "analysis_type": "Master Call Analysis",
                "transcription_engine": "AssemblyAI Professional",
                "ai_analyzer": "Gemini AI Professional",
                "processing_date": datetime.now().isoformat(),
                "dialogue_file": dialogue_file,
                "assembly_data": assembly_file
            }
        }
        
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(complete_analysis, f, ensure_ascii=False, indent=2)
        
        # MD –æ—Ç—á–µ—Ç
        md_file = f"master_report_{timestamp}.md"
        
        report = f"""# üéØ –ú–ê–°–¢–ï–†-–ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–Æ–©–ï–ì–û –ó–í–û–ù–ö–ê

**üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M')}  
**üìÅ –î–∏–∞–ª–æ–≥:** {dialogue_file}  
**ü§ñ –°–∏—Å—Ç–µ–º–∞:** Master Call Analyzer v2.0

---

## üèóÔ∏è –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö

- **üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** AssemblyAI Professional API
- **üß† AI –ê–Ω–∞–ª–∏–∑:** Google Gemini Professional  
- **üìä –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è:** –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π —Å–ø–∏–∫–µ—Ä–æ–≤
- **üìà –ì–ª—É–±–∏–Ω–∞:** –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–∞–ª–∏–∑–∞

---

## üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê

**–ë–∞–ª–ª:** {analysis_result.get('overall_score', 'N/A')}/100  
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {analysis_result.get('quality_rating', 'N/A')}  
**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞:** {analysis_result.get('success_probability', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}

---

## ‚úÖ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ ({len(analysis_result.get('strengths', []))})

"""
        
        for i, strength in enumerate(analysis_result.get('strengths', []), 1):
            report += f"{i}. {strength}\n"
        
        report += f"""
---

## ‚ö†Ô∏è –û–ë–õ–ê–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø ({len(analysis_result.get('weaknesses', []))})

"""
        
        for i, weakness in enumerate(analysis_result.get('weaknesses', []), 1):
            report += f"{i}. {weakness}\n"
        
        report += f"""
---

## üí° –≠–ö–°–ü–ï–†–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(analysis_result.get('recommendations', []))})

"""
        
        for i, rec in enumerate(analysis_result.get('recommendations', []), 1):
            report += f"{i}. {rec}\n"
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        if 'psychological_profile' in analysis_result:
            profile = analysis_result['psychological_profile']
            report += "\n---\n\n## üß† –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê\n\n"
            
            if isinstance(profile, dict):
                for key, value in profile.items():
                    if isinstance(value, list):
                        report += f"**{key.title()}:** {', '.join(value)}\n\n"
                    else:
                        report += f"**{key.title()}:** {value}\n\n"
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã
        if analysis_result.get('critical_moments'):
            moments = analysis_result['critical_moments']
            report += "---\n\n## üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–ú–ï–ù–¢–´ –†–ê–ó–ì–û–í–û–†–ê\n\n"
            
            for i, moment in enumerate(moments, 1):
                if isinstance(moment, dict):
                    time_marker = moment.get('time', 'N/A')
                    description = moment.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    report += f"{i}. **[{time_marker}]** {description}\n"
                else:
                    report += f"{i}. {moment}\n"
        
        report += f"""
---

## üìÅ –§–ê–ô–õ–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í

- **üéµ –ò—Å—Ö–æ–¥–Ω—ã–π –∞—É–¥–∏–æ:** –û–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ AssemblyAI
- **üìù –î–∏–∞–ª–æ–≥:** `{dialogue_file}`
- **üìã JSON –∞–Ω–∞–ª–∏–∑:** `{json_file}`
- **üîÑ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:** `{assembly_file}`

---

## üìù –†–ï–ó–Æ–ú–ï

–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –º–∞—Å—Ç–µ—Ä-—Å–∏—Å—Ç–µ–º–æ–π –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –≤–∫–ª—é—á–∞—é—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ AssemblyAI —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π —Å–ø–∏–∫–µ—Ä–æ–≤ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini AI. 

–°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞ –∏ –≥–ª—É–±–æ–∫–∏–π AI-–∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.

**ü§ñ Powered by:** AssemblyAI + Google Gemini AI  
**‚ö° –°–∏—Å—Ç–µ–º–∞:** Master Call Analyzer v2.0  
**üéØ –£—Ä–æ–≤–µ–Ω—å:** Enterprise Grade Analysis
"""
        
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"‚úÖ JSON –æ—Ç—á–µ—Ç: {json_file}")
        print(f"‚úÖ MD –æ—Ç—á–µ—Ç: {md_file}")
        
        return json_file, md_file


def analyze_call_with_gemini(dialogue_file: str = "dialogue.txt", api_key: str = None):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é Gemini AI"""
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    if not api_key:
        api_key = os.getenv("GEMINI_API_KEY", "AIzaSyCZcwunnoBBqhTYtbgJZl-7hpqJEVqFTeY")
    
    print("="*80)
    print("üéØ –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–í–û–ù–ö–ê (GEMINI AI)")
    print("="*80)
    
    # –ß–∏—Ç–∞–µ–º –¥–∏–∞–ª–æ–≥
    try:
        with open(dialogue_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        dialogue_parts = []
        for line in lines:
            line = line.strip()
            if line.startswith('[SPEAKER_'):
                parts = line.split('] ', 1)
                if len(parts) == 2:
                    header = parts[0][1:]
                    text = parts[1]
                    
                    header_parts = header.split(' ')
                    if len(header_parts) >= 2:
                        speaker = header_parts[0]
                        time_str = header_parts[1]
                        
                        role = "–ü–†–û–î–ê–í–ï–¶" if speaker == "SPEAKER_A" else "–ö–õ–ò–ï–ù–¢"
                        dialogue_parts.append(f"[{time_str}] {role}: {text}")
        
        dialogue_text = "\n".join(dialogue_parts)
        print(f"üìû –î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(dialogue_parts)} —Ä–µ–ø–ª–∏–∫\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π Gemini –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    try:
        analyzer = GeminiCallAnalyzer(api_key)
        result = analyzer.analyze_call(dialogue_text)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("üîß –ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ Gemini AI")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - API –∫–ª—é—á Gemini")
        print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É") 
        print("   - –ö–≤–æ—Ç—ã API")
        return
    
    # –ü–û–õ–ù–´–ô –î–ï–¢–ê–õ–¨–ù–´–ô –í–´–í–û–î –í –¢–ï–†–ú–ò–ù–ê–õ
    print(f"\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {result.get('overall_score', 'N/A')}/100")
    print(f"üìà –ö–ê–¢–ï–ì–û–†–ò–Ø –ö–ê–ß–ï–°–¢–í–ê: {result.get('quality_rating', 'N/A')}")
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
    if 'success_probability' in result:
        print(f"üéØ –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –£–°–ü–ï–•–ê –°–î–ï–õ–ö–ò: {result['success_probability']}")
    

    
    # –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –°–ò–õ–¨–ù–´–• –°–¢–û–†–û–ù
    print(f"\n‚úÖ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ ({len(result.get('strengths', []))} –ø—É–Ω–∫—Ç–æ–≤):")
    for i, strength in enumerate(result.get('strengths', []), 1):
        print(f"   {i}. {strength}")
    
    # –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –°–õ–ê–ë–´–• –°–¢–û–†–û–ù  
    print(f"\n‚ö†Ô∏è –û–ë–õ–ê–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø ({len(result.get('weaknesses', []))} –ø—É–Ω–∫—Ç–æ–≤):")
    for i, weakness in enumerate(result.get('weaknesses', []), 1):
        print(f"   {i}. {weakness}")
    
    # –í–°–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    print(f"\nüí° –≠–ö–°–ü–ï–†–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(result.get('recommendations', []))} –ø—É–Ω–∫—Ç–æ–≤):")
    for i, rec in enumerate(result.get('recommendations', []), 1):
        print(f"   {i}. {rec}")
    
    # –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê
    if 'psychological_profile' in result:
        profile = result['psychological_profile']
        print(f"\nüß† –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê:")
        
        if isinstance(profile, dict):
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è
            if 'description' in profile:
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile['description']}")
            if 'keywords' in profile:
                print(f"   üîë –ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(profile['keywords'])}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for key, value in profile.items():
                if key not in ['description', 'keywords']:
                    if isinstance(value, list):
                        print(f"   üî∏ {key.title()}: {', '.join(value)}")
                    else:
                        print(f"   üî∏ {key.title()}: {value}")
        else:
            print(f"   üìù {profile}")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–ú–ï–ù–¢–´
    if 'critical_moments' in result:
        moments = result['critical_moments']
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–ú–ï–ù–¢–´ –†–ê–ó–ì–û–í–û–†–ê:")
        
        if isinstance(moments, list):
            for i, moment in enumerate(moments, 1):
                if isinstance(moment, dict):
                    time_marker = moment.get('time', 'N/A')
                    description = moment.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    print(f"   {i}. [{time_marker}] {description}")
                else:
                    print(f"   {i}. {moment}")
        else:
            print(f"   {moments}")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    print(f"\nü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: Gemini AI Professional Analysis")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = f"call_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ü–û–õ–ù–´–ô –≠–ö–°–ü–ï–†–¢–ù–´–ô –û–¢–ß–ï–¢
    report = f"""# üéØ –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–Æ–©–ï–ì–û –ó–í–û–ù–ö–ê

**üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M')}  
**üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:** {dialogue_file}  
**ü§ñ –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** Gemini AI Professional Analysis

---

## üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê

**–ë–∞–ª–ª:** {result.get('overall_score', 'N/A')}/100  
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {result.get('quality_rating', 'N/A')}  
**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞:** {result.get('success_probability', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}

### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
- **–ú–æ–¥–µ–ª—å AI:** Gemini Professional Analysis
- **–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:** –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å

"""
    
    report += f"""

---

## ‚úÖ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ ({len(result.get('strengths', []))})

"""
    
    for i, strength in enumerate(result.get('strengths', []), 1):
        report += f"{i}. {strength}\n"
    
    report += f"""
---

## ‚ö†Ô∏è –û–ë–õ–ê–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø ({len(result.get('weaknesses', []))})

"""
    
    for i, weakness in enumerate(result.get('weaknesses', []), 1):
        report += f"{i}. {weakness}\n"
    
    report += f"""
---

## üí° –≠–ö–°–ü–ï–†–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(result.get('recommendations', []))})

"""
    
    for i, rec in enumerate(result.get('recommendations', []), 1):
        report += f"{i}. {rec}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    if 'psychological_profile' in result:
        profile = result['psychological_profile']
        report += "\n---\n\n## üß† –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê\n\n"
        
        if isinstance(profile, dict):
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
            if 'description' in profile:
                report += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {profile['description']}\n\n"
            if 'keywords' in profile:
                report += f"**–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** {', '.join(profile['keywords'])}\n\n"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            for key, value in profile.items():
                if key not in ['description', 'keywords']:
                    if isinstance(value, list):
                        report += f"**{key.title()}:** {', '.join(value)}\n\n"
                    else:
                        report += f"**{key.title()}:** {value}\n\n"
        else:
            report += f"{profile}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã
    if 'critical_moments' in result:
        moments = result['critical_moments']
        report += "---\n\n## üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–ú–ï–ù–¢–´ –†–ê–ó–ì–û–í–û–†–ê\n\n"
        
        if isinstance(moments, list):
            for i, moment in enumerate(moments, 1):
                if isinstance(moment, dict):
                    time_marker = moment.get('time', 'N/A')
                    description = moment.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    report += f"{i}. **[{time_marker}]** {description}\n"
                else:
                    report += f"{i}. {moment}\n"
        else:
            report += f"{moments}\n"
    

    
    report += f"""
---

## üìù –†–ï–ó–Æ–ú–ï

–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.

**–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:** `{output_file}`  
**–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω:** Gemini AI Professional Call Analysis System
"""
    
    report_file = f"call_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")


def process_mp3_file(audio_file: str = "sell_audio.mp3", expected_speakers: int = 2):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ MP3 —Ñ–∞–π–ª–∞"""
    
    # API –∫–ª—é—á–∏
    ASSEMBLYAI_KEY = "83d2ca78325f4cb59b2fc841e9c89137"
    GEMINI_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCZcwunnoBBqhTYtbgJZl-7hpqJEVqFTeY")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä-—Å–∏—Å—Ç–µ–º—É
    master = MasterCallAnalyzer(ASSEMBLYAI_KEY, GEMINI_KEY)
    
    try:
        dialogue, json_report, md_report, assembly_data = master.process_audio_complete(audio_file, expected_speakers)
        
        print("\nüöÄ –ú–ê–°–¢–ï–†-–°–ò–°–¢–ï–ú–ê –ó–ê–í–ï–†–®–ò–õ–ê –†–ê–ë–û–¢–£ –£–°–ü–ï–®–ù–û!")
        print("üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return dialogue, json_report, md_report, assembly_data
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ú–ê–°–¢–ï–†-–°–ò–°–¢–ï–ú–´: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π –∏ –Ω–∞–ª–∏—á–∏–∏ MP3 —Ñ–∞–π–ª–∞")
        return None


if __name__ == "__main__":
    print("üéØ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:")
    print("1. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ MP3 —Ñ–∞–π–ª–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ dialogue.txt")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ MP3
            audio_file = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è MP3 —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'sell_audio.mp3'): ").strip()
            if not audio_file:
                audio_file = "sell_audio.mp3"
            
            print(f"\nüéµ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {audio_file}")
            process_mp3_file(audio_file)
            
        elif choice == "2":
            # –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            dialogue_file = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–∏–∞–ª–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'dialogue.txt'): ").strip()
            if not dialogue_file:
                dialogue_file = "dialogue.txt"
            
            print(f"\nüìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥: {dialogue_file}")
            analyze_call_with_gemini(dialogue_file)
            
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            process_mp3_file()
            
    except KeyboardInterrupt:
        print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        process_mp3_file() 